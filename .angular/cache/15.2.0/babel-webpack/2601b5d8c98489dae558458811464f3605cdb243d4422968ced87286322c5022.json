{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class postsService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isloading = false;\n    this.Url = \"http://localhost:3000/api/posts\";\n    this.posts = [];\n    this.postUpdated = new Subject();\n  }\n  //to match the id of input and db we have to map the data\n  getPosts(postsPerPage, currentPage) {\n    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n    this.http.get(this.Url + queryParams).pipe(map(postData => {\n      return {\n        posts: postData.posts.map(post => {\n          return {\n            id: post._id,\n            title: post.title,\n            content: post.content,\n            imagePath: post.imagePath,\n            creator: post.creator\n          };\n        }),\n        maxPosts: postData.maxPosts\n      };\n    })).subscribe(transformedpostData => {\n      this.posts = transformedpostData.posts;\n      this.postUpdated.next({\n        posts: [...this.posts],\n        postCount: transformedpostData.maxPosts\n      });\n    });\n  }\n  getPostUpdateListener() {\n    return this.postUpdated.asObservable();\n  }\n  //getting single post\n  getpost(id) {\n    return this.http.get(\"http://localhost:3000/api/posts/\" + id);\n  }\n  addposts(title, content, image) {\n    this.isloading = true;\n    const postData = new FormData();\n    postData.append(\"title\", title);\n    postData.append(\"content\", content);\n    postData.append(\"image\", image);\n    this.http.post(\"http://localhost:3000/api/posts\", postData).subscribe(Response => {\n      this.router.navigate([\"/\"]);\n    });\n    // .subscribe(responseData => {\n    // \t// const imagePath = responseData.post.imagePath;\n    // \t// console.log(imagePath);\n    // \tif (responseData) {\n    // \t\tconst post: post = {\n    // \t\t\tid: \"\",\n    // \t\t\ttitle: title,\n    // \t\t\tcontent: content,\n    // \t\t\timagePath: \"\",\n    // \t\t};\n    // \t\tthis.posts.push(post);\n    // \t\tthis.postUpdated.next([...this.posts]);\n    // \t\tthis.router.navigate([\"/\"]);\n    // \t\tconsole.log(this.posts);\n    // \t}\n    // });\n  }\n\n  UpdatePost(id, title, content, image) {\n    this.isloading = true;\n    let postData;\n    if (typeof image === \"object\") {\n      postData = new FormData();\n      postData.append(\"id\", id);\n      postData.append(\"title\", title);\n      postData.append(\"content\", content);\n      postData.append(\"image\", image, title);\n    } else {\n      postData = {\n        id: id,\n        title: title,\n        content: content,\n        imagePath: image,\n        creator: null\n      };\n    }\n    this.http.put(\"http://localhost:3000/api/posts/\" + id, postData).subscribe(Response => {\n      this.router.navigate([\"/\"]);\n    });\n  }\n  // \t.subscribe(response => {\n  // \tconst post: post = {\n  // \t\tid: id,\n  // \t\ttitle: title,\n  // \t\tcontent: content,\n  // \t\timagePath: \"\",\n  // \t};\n  // \tconst updatedposts = [...this.posts];\n  // \tconst oldIndex = updatedposts.findIndex(p => {\n  // \t\tp.id === id;\n  // \t});\n  // \tupdatedposts[oldIndex] = post;\n  // \tthis.posts = updatedposts;\n  // \tthis.postUpdated.next([...this.posts]);\n  // });\n  //deleting selected post and updating frontend with filter method\n  DeletePosts(Id) {\n    return this.http.delete(\"http://localhost:3000/api/posts/\" + Id);\n  }\n}\npostsService.ɵfac = function postsService_Factory(t) {\n  return new (t || postsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\npostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: postsService,\n  factory: postsService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["Subject","map","postsService","constructor","http","router","getPosts","postsPerPage","currentPage","queryParams","get","Url","pipe","postData","posts","post","id","_id","title","content","imagePath","creator","maxPosts","subscribe","transformedpostData","postUpdated","next","postCount","getPostUpdateListener","asObservable","getpost","addposts","image","isloading","FormData","append","Response","navigate","UpdatePost","put","DeletePosts","Id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\myPosts\\src\\app\\posts\\posts.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { post } from \"./post.model\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { map } from \"rxjs\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\",\r\n})\r\nexport class postsService {\r\n\tisloading = false;\r\n\tUrl = \"http://localhost:3000/api/posts\";\r\n\tprivate posts: post[] = [];\r\n\r\n\tprivate postUpdated = new Subject<{ posts: post[]; postCount: number }>();\r\n\r\n\tconstructor(private http: HttpClient, private router: Router) {}\r\n\r\n\t//to match the id of input and db we have to map the data\r\n\tgetPosts(postsPerPage: number, currentPage: number) {\r\n\t\tconst queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\r\n\r\n\t\tthis.http\r\n\t\t\t.get<{ message: string; posts: any; maxPosts: number }>(this.Url + queryParams)\r\n\t\t\t.pipe(\r\n\t\t\t\tmap(postData => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tposts: postData.posts.map((post: any) => {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tid: post._id,\r\n\t\t\t\t\t\t\t\ttitle: post.title,\r\n\t\t\t\t\t\t\t\tcontent: post.content,\r\n\t\t\t\t\t\t\t\timagePath: post.imagePath,\r\n\t\t\t\t\t\t\t\tcreator: post.creator,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tmaxPosts: postData.maxPosts,\r\n\t\t\t\t\t};\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(transformedpostData => {\r\n\t\t\t\tthis.posts = transformedpostData.posts;\r\n\t\t\t\tthis.postUpdated.next({ posts: [...this.posts], postCount: transformedpostData.maxPosts });\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetPostUpdateListener() {\r\n\t\treturn this.postUpdated.asObservable();\r\n\t}\r\n\r\n\t//getting single post\r\n\tgetpost(id: String) {\r\n\t\treturn this.http.get<{ _id: string; title: string; content: string; imagePath: string; creator: string }>(\r\n\t\t\t\"http://localhost:3000/api/posts/\" + id\r\n\t\t);\r\n\t}\r\n\r\n\taddposts(title: string, content: string, image: File) {\r\n\t\tthis.isloading = true;\r\n\r\n\t\tconst postData = new FormData();\r\n\r\n\t\tpostData.append(\"title\", title);\r\n\t\tpostData.append(\"content\", content);\r\n\t\tpostData.append(\"image\", image);\r\n\r\n\t\tthis.http\r\n\t\t\t.post<{ message: string; post: post }>(\"http://localhost:3000/api/posts\", postData)\r\n\t\t\t.subscribe(Response => {\r\n\t\t\t\tthis.router.navigate([\"/\"]);\r\n\t\t\t});\r\n\t\t// .subscribe(responseData => {\r\n\t\t// \t// const imagePath = responseData.post.imagePath;\r\n\t\t// \t// console.log(imagePath);\r\n\t\t// \tif (responseData) {\r\n\t\t// \t\tconst post: post = {\r\n\t\t// \t\t\tid: \"\",\r\n\t\t// \t\t\ttitle: title,\r\n\t\t// \t\t\tcontent: content,\r\n\t\t// \t\t\timagePath: \"\",\r\n\t\t// \t\t};\r\n\t\t// \t\tthis.posts.push(post);\r\n\t\t// \t\tthis.postUpdated.next([...this.posts]);\r\n\t\t// \t\tthis.router.navigate([\"/\"]);\r\n\t\t// \t\tconsole.log(this.posts);\r\n\t\t// \t}\r\n\t\t// });\r\n\t}\r\n\r\n\tUpdatePost(id: string, title: string, content: string, image: File | string) {\r\n\t\tthis.isloading = true;\r\n\t\tlet postData: post | FormData;\r\n\t\tif (typeof image === \"object\") {\r\n\t\t\tpostData = new FormData();\r\n\t\t\tpostData.append(\"id\", id);\r\n\t\t\tpostData.append(\"title\", title);\r\n\t\t\tpostData.append(\"content\", content);\r\n\t\t\tpostData.append(\"image\", image, title);\r\n\t\t} else {\r\n\t\t\tpostData = {\r\n\t\t\t\tid: id,\r\n\t\t\t\ttitle: title,\r\n\t\t\t\tcontent: content,\r\n\t\t\t\timagePath: image as string,\r\n\t\t\t\tcreator: null,\r\n\t\t\t};\r\n\t\t}\r\n\t\tthis.http.put(\"http://localhost:3000/api/posts/\" + id, postData).subscribe(Response => {\r\n\t\t\tthis.router.navigate([\"/\"]);\r\n\t\t});\r\n\t}\r\n\t// \t.subscribe(response => {\r\n\t// \tconst post: post = {\r\n\t// \t\tid: id,\r\n\t// \t\ttitle: title,\r\n\t// \t\tcontent: content,\r\n\t// \t\timagePath: \"\",\r\n\t// \t};\r\n\t// \tconst updatedposts = [...this.posts];\r\n\t// \tconst oldIndex = updatedposts.findIndex(p => {\r\n\t// \t\tp.id === id;\r\n\t// \t});\r\n\t// \tupdatedposts[oldIndex] = post;\r\n\t// \tthis.posts = updatedposts;\r\n\t// \tthis.postUpdated.next([...this.posts]);\r\n\t// });\r\n\r\n\t//deleting selected post and updating frontend with filter method\r\n\tDeletePosts(Id: String) {\r\n\t\treturn this.http.delete(\"http://localhost:3000/api/posts/\" + Id);\r\n\t}\r\n\r\n\t// \t.subscribe(resposnseData => {\r\n\t// \tconsole.log(resposnseData);\r\n\r\n\t// \tconst updatedpost = this.posts.filter(post => {\r\n\t// \t\treturn post.id !== paramId;\r\n\t// \t});\r\n\r\n\t// \tthis.posts = updatedpost;\r\n\t// \tthis.postUpdated.next([...this.posts]);\r\n\t// });\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}