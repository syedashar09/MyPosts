{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = \"http://localhost:3000/api/user/\";\n    this.IsAuthenticated = false;\n    this.authStatusListner = new Subject();\n  }\n  getAuthStatusListner() {\n    return this.authStatusListner.asObservable();\n  }\n  getIsAuth() {\n    return this.IsAuthenticated;\n  }\n  getAuthToken() {\n    return this.AuthToken;\n  }\n  CreateUser(email, username, password) {\n    const AuthData = {\n      email: email,\n      username: username,\n      password: password\n    };\n    this.http.post(this.url + \"signup\", AuthData).subscribe(Response => {\n      console.log(Response);\n    });\n  }\n  logInUser(email, password) {\n    const AuthData = {\n      email: email,\n      password: password,\n      username: null\n    };\n    this.http.post(\"http://localhost:3000/api/user/login\", AuthData).subscribe(Response => {\n      const token = Response.token;\n      this.AuthToken = token;\n      if (Response.token) {\n        const expiresInDuration = Response.expiresIn;\n        this.setAuthTimer(expiresInDuration);\n        const now = new Date();\n        const expirationTime = new Date(now.getTime() + expiresInDuration * 1000);\n        console.log(expirationTime);\n        this.saveAuthData(token, expirationTime);\n        this.authStatusListner.next(true);\n        this.IsAuthenticated = true;\n        console.log(Response.message);\n      }\n    });\n    this.router.navigate([\"/\"]);\n  }\n  logOutUser() {\n    this.AuthToken = null;\n    this.IsAuthenticated = false;\n    this.authStatusListner.next(false);\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate([\"/\"]);\n  }\n  autoAuthUser() {}\n  setAuthTimer(duration) {\n    this.tokenTimer = setTimeout(() => {\n      this.logOutUser();\n    }, duration * 1000);\n    console.log(\"Setting timer: \" + duration);\n  }\n  saveAuthData(token, duration) {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expiration\", duration.toISOString());\n  }\n  clearAuthData() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expiration\");\n  }\n  getAuthInfo() {\n    const token = localStorage.getItem(\"token\");\n    const expirationDate = localStorage.getItem(\"expiration\");\n    if (!token || !expirationDate) {\n      return;\n    }\n    return {\n      token: token,\n      expirationDate: new Date(expirationDate)\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["Subject","AuthService","constructor","http","router","getAuthStatusListner","authStatusListner","asObservable","getIsAuth","IsAuthenticated","getAuthToken","AuthToken","CreateUser","email","username","password","AuthData","post","url","subscribe","Response","console","log","logInUser","token","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationTime","getTime","saveAuthData","next","message","navigate","logOutUser","clearTimeout","tokenTimer","clearAuthData","autoAuthUser","duration","setTimeout","localStorage","setItem","toISOString","removeItem","getAuthInfo","getItem","expirationDate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\myPosts\\src\\app\\Auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { AuthData } from \"./auth.Model\";\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class AuthService {\n\tprivate url = \"http://localhost:3000/api/user/\";\n\tprivate AuthToken: string;\n\tprivate IsAuthenticated = false;\n\tprivate authStatusListner = new Subject<boolean>();\n\tprivate tokenTimer: any;\n\n\tconstructor(private http: HttpClient, private router: Router) {}\n\n\tgetAuthStatusListner() {\n\t\treturn this.authStatusListner.asObservable();\n\t}\n\n\tgetIsAuth() {\n\t\treturn this.IsAuthenticated;\n\t}\n\tgetAuthToken() {\n\t\treturn this.AuthToken;\n\t}\n\n\tCreateUser(email: string, username: string, password: string) {\n\t\tconst AuthData: AuthData = {\n\t\t\temail: email,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t};\n\t\tthis.http.post(this.url + \"signup\", AuthData).subscribe(Response => {\n\t\t\tconsole.log(Response);\n\t\t});\n\t}\n\n\tlogInUser(email: string, password: string) {\n\t\tconst AuthData: AuthData = { email: email, password: password, username: null };\n\t\tthis.http\n\t\t\t.post<{ message: string; token: string; expiresIn: number }>(\n\t\t\t\t\"http://localhost:3000/api/user/login\",\n\t\t\t\tAuthData\n\t\t\t)\n\t\t\t.subscribe(Response => {\n\t\t\t\tconst token = Response.token;\n\t\t\t\tthis.AuthToken = token;\n\t\t\t\tif (Response.token) {\n\t\t\t\t\tconst expiresInDuration = Response.expiresIn;\n\t\t\t\t\tthis.setAuthTimer(expiresInDuration);\n\t\t\t\t\tconst now = new Date();\n\t\t\t\t\tconst expirationTime = new Date(now.getTime() + expiresInDuration * 1000);\n\t\t\t\t\tconsole.log(expirationTime);\n\t\t\t\t\tthis.saveAuthData(token, expirationTime);\n\t\t\t\t\tthis.authStatusListner.next(true);\n\t\t\t\t\tthis.IsAuthenticated = true;\n\t\t\t\t\tconsole.log(Response.message);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.router.navigate([\"/\"]);\n\t}\n\tlogOutUser() {\n\t\tthis.AuthToken = null;\n\t\tthis.IsAuthenticated = false;\n\t\tthis.authStatusListner.next(false);\n\t\tclearTimeout(this.tokenTimer);\n\t\tthis.clearAuthData();\n\t\tthis.router.navigate([\"/\"]);\n\t}\n\n\tautoAuthUser() {}\n\n\tprivate setAuthTimer(duration: number) {\n\t\tthis.tokenTimer = setTimeout(() => {\n\t\t\tthis.logOutUser();\n\t\t}, duration * 1000);\n\t\tconsole.log(\"Setting timer: \" + duration);\n\t}\n\n\tprivate saveAuthData(token: string, duration: Date) {\n\t\tlocalStorage.setItem(\"token\", token);\n\t\tlocalStorage.setItem(\"expiration\", duration.toISOString());\n\t}\n\n\tprivate clearAuthData() {\n\t\tlocalStorage.removeItem(\"token\");\n\t\tlocalStorage.removeItem(\"expiration\");\n\t}\n\n\tprivate getAuthInfo() {\n\t\tconst token = localStorage.getItem(\"token\");\n\t\tconst expirationDate = localStorage.getItem(\"expiration\");\n\t\tif (!token || !expirationDate) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\ttoken: token,\n\t\t\texpirationDate: new Date(expirationDate),\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}