{"ast":null,"code":"import { Observable, of } from \"rxjs\";\nexport const mimeType = control => {\n  if (typeof control.value === null) {\n    return of(null);\n  }\n  const file = control.value;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(observer => {\n    fileReader.addEventListener(\"loadend\", () => {\n      // const csv: ArrayBuffer = fileReader.result as ArrayBuffer;\n      const arr = new Uint8Array(fileReader.result).subarray(0, 4);\n      let header = \"\";\n      let isValid = false;\n      for (let i = 0; i < arr.length; i++) {\n        header += arr[i].toString(16);\n      }\n      switch (header) {\n        case \"89504e47\":\n          isValid = true;\n          break;\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n          isValid = true;\n          break;\n        default:\n          // Or you can use the blob.type as fallback\n          isValid = false;\n          break;\n      }\n      if (isValid) {\n        observer.next(null);\n      } else {\n        observer.next({\n          invalidMimeType: true\n        });\n      }\n      observer.complete();\n    });\n    fileReader.readAsArrayBuffer(file);\n  });\n  return frObs;\n};","map":{"version":3,"mappings":"AACA,SAASA,UAAU,EAAYC,EAAE,QAAQ,MAAM;AAE/C,OAAO,MAAMC,QAAQ,GACpBC,OAAwB,IACiD;EACzE,IAAI,OAAQA,OAAO,CAACC,KAAM,KAAK,IAAI,EAAE;IACpC,OAAOH,EAAE,CAAC,IAAI,CAAC;;EAEhB,MAAMI,IAAI,GAAGF,OAAO,CAACC,KAAa;EAClC,MAAME,UAAU,GAAG,IAAIC,UAAU,EAAE;EACnC,MAAMC,KAAK,GAAGR,UAAU,CAACS,MAAM,CAAEC,QAA2C,IAAI;IAC/EJ,UAAU,CAACK,gBAAgB,CAAC,SAAS,EAAE,MAAK;MAC3C;MACA,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACP,UAAU,CAACQ,MAAqB,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3E,IAAIC,MAAM,GAAG,EAAE;MACf,IAAIC,OAAO,GAAG,KAAK;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;QACpCF,MAAM,IAAIJ,GAAG,CAACM,CAAC,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC;;MAE9B,QAAQJ,MAAM;QACb,KAAK,UAAU;UACdC,OAAO,GAAG,IAAI;UACd;QACD,KAAK,UAAU;QACf,KAAK,UAAU;QACf,KAAK,UAAU;QACf,KAAK,UAAU;QACf,KAAK,UAAU;UACdA,OAAO,GAAG,IAAI;UACd;QACD;UAAS;UACRA,OAAO,GAAG,KAAK;UACf;MAAM;MAER,IAAIA,OAAO,EAAE;QACZP,QAAQ,CAACW,IAAI,CAAC,IAAI,CAAC;OACnB,MAAM;QACNX,QAAQ,CAACW,IAAI,CAAC;UAAEC,eAAe,EAAE;QAAI,CAAE,CAAC;;MAEzCZ,QAAQ,CAACa,QAAQ,EAAE;IACpB,CAAC,CAAC;IACFjB,UAAU,CAACkB,iBAAiB,CAACnB,IAAI,CAAC;EACnC,CAAC,CAAC;EACF,OAAOG,KAAK;AACb,CAAC","names":["Observable","of","mimeType","control","value","file","fileReader","FileReader","frObs","create","observer","addEventListener","arr","Uint8Array","result","subarray","header","isValid","i","length","toString","next","invalidMimeType","complete","readAsArrayBuffer"],"sourceRoot":"","sources":["C:\\Projects\\myPosts\\src\\app\\posts\\post-create\\mime-type.validator.ts"],"sourcesContent":["import { AbstractControl } from \"@angular/forms\";\r\nimport { Observable, Observer, of } from \"rxjs\";\r\n\r\nexport const mimeType = (\r\n\tcontrol: AbstractControl\r\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\r\n\tif (typeof (control.value) === null) {\r\n\t\treturn of(null);\r\n\t}\r\n\tconst file = control.value as File;\r\n\tconst fileReader = new FileReader();\r\n\tconst frObs = Observable.create((observer: Observer<{ [key: string]: any } >) => {\r\n\t\tfileReader.addEventListener(\"loadend\", () => {\r\n\t\t\t// const csv: ArrayBuffer = fileReader.result as ArrayBuffer;\r\n\t\t\tconst arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\r\n\t\t\tlet header = \"\";\r\n\t\t\tlet isValid = false;\r\n\t\t\tfor (let i = 0; i < arr.length; i++) {\r\n\t\t\t\theader += arr[i].toString(16);\r\n\t\t\t}\r\n\t\t\tswitch (header) {\r\n\t\t\t\tcase \"89504e47\":\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"ffd8ffe0\":\r\n\t\t\t\tcase \"ffd8ffe1\":\r\n\t\t\t\tcase \"ffd8ffe2\":\r\n\t\t\t\tcase \"ffd8ffe3\":\r\n\t\t\t\tcase \"ffd8ffe8\":\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: // Or you can use the blob.type as fallback\r\n\t\t\t\t\tisValid = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (isValid) {\r\n\t\t\t\tobserver.next(null);\r\n\t\t\t} else {\r\n\t\t\t\tobserver.next({ invalidMimeType: true });\r\n\t\t\t}\r\n\t\t\tobserver.complete();\r\n\t\t});\r\n\t\tfileReader.readAsArrayBuffer(file);\r\n\t});\r\n\treturn frObs;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}