{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport { ErrorComponent } from \"./Error/error.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nexport class ErrorInterceptor {\n  constructor(matDialog) {\n    this.matDialog = matDialog;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(catchError(error => {\n      let errorMsg = \"\";\n      if (error.error.message) {\n        errorMsg = `Error: ${error.error.error.message}`;\n      } else {\n        errorMsg = `Error: ${error.error.message}`;\n      }\n      this.matDialog.open(ErrorComponent, {\n        data: {\n          message: errorMsg\n        }\n      });\n      // this.errorService.ThrowError(errorMsg);\n      return throwError(() => {\n        return errorMsg;\n      });\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.MatDialog));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,EAAEC,UAAU,QAAQ,MAAM;AAC7C,SAASC,cAAc,QAAQ,yBAAyB;;;AAGxD,OAAM,MAAOC,gBAAgB;EAC5BC,YAAoBC,SAAoB;IAApB,cAAS,GAATA,SAAS;EAAc;EAE3CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IACjD,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAC3BV,UAAU,CAAEW,KAAwB,IAAI;MACvC,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAID,KAAK,CAACA,KAAK,CAACE,OAAO,EAAE;QACxBD,QAAQ,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACA,KAAK,CAACE,OAAO,EAAE;OAChD,MAAM;QACND,QAAQ,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACE,OAAO,EAAE;;MAE3C,IAAI,CAACR,SAAS,CAACS,IAAI,CAACZ,cAAc,EAAE;QAAEa,IAAI,EAAE;UAAEF,OAAO,EAAED;QAAQ;MAAE,CAAE,CAAC;MACpE;MAEA,OAAOX,UAAU,CAAC,MAAK;QACtB,OAAOW,QAAQ;MAChB,CAAC,CAAC;IACH,CAAC,CAAC,CACF;EACF;;AApBYT,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAa,SAAhBb,gBAAgB;AAAA","names":["catchError","throwError","ErrorComponent","ErrorInterceptor","constructor","matDialog","intercept","req","next","handle","pipe","error","errorMsg","message","open","data","factory"],"sourceRoot":"","sources":["C:\\Projects\\myPosts\\src\\app\\error-Interceptor.ts"],"sourcesContent":["import { HttpErrorResponse, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { catchError, throwError } from \"rxjs\";\r\nimport { ErrorComponent } from \"./Error/error.component\";\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\tconstructor(private matDialog: MatDialog) {}\r\n\r\n\tintercept(req: HttpRequest<any>, next: HttpHandler) {\r\n\t\treturn next.handle(req).pipe(\r\n\t\t\tcatchError((error: HttpErrorResponse) => {\r\n\t\t\t\tlet errorMsg = \"\";\r\n\t\t\t\tif (error.error.message) {\r\n\t\t\t\t\terrorMsg = `Error: ${error.error.error.message}`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\terrorMsg = `Error: ${error.error.message}`;\r\n\t\t\t\t}\r\n\t\t\t\tthis.matDialog.open(ErrorComponent, { data: { message: errorMsg } });\r\n\t\t\t\t// this.errorService.ThrowError(errorMsg);\r\n\r\n\t\t\t\treturn throwError(() => {\r\n\t\t\t\t\treturn errorMsg;\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}