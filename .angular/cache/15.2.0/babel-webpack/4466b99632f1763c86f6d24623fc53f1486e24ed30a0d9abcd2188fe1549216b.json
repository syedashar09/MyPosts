{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/progress-spinner\";\nfunction LoginComponent_mat_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 2);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 80);\n  }\n}\nfunction LoginComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"mat-card\", 4)(2, \"mat-card-title\")(3, \"span\", 5);\n    i0.ɵɵtext(4, \"Log in\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_div_1_Template_form_ngSubmit_5_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.OnLogin());\n    });\n    i0.ɵɵelementStart(6, \"mat-form-field\");\n    i0.ɵɵelement(7, \"input\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-form-field\");\n    i0.ɵɵelement(9, \"input\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 9);\n    i0.ɵɵtext(11, \" Save Post \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.loginForm);\n  }\n}\nexport class LoginComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.isLoading = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(5)]]\n    });\n  }\n  OnLogin() {}\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[3, \"diameter\", 4, \"ngIf\"], [\"fxLayoutAlign\", \"center\", \"fxFlexFill\", \"\", \"class\", \"main-div\", 4, \"ngIf\"], [3, \"diameter\"], [\"fxLayoutAlign\", \"center\", \"fxFlexFill\", \"\", 1, \"main-div\"], [\"color\", \"primary\", \"fxFlex\", \"50\"], [1, \"jumbotron\"], [3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Post Title\", \"required\", \"\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Post Content\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", \"type\", \"submit\", 1, \"save-button\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LoginComponent_mat_spinner_0_Template, 1, 1, \"mat-spinner\", 0);\n      i0.ɵɵtemplate(1, LoginComponent_div_1_Template, 12, 1, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i2.NgIf, i3.MatInput, i4.MatFormField, i5.MatCard, i5.MatCardTitle, i6.MatButton, i7.MatProgressSpinner],\n  styles: [\"mat-card[_ngcontent-%COMP%] {\\r\\n   justify-content: center;\\r\\n   font-family: monospace;\\r\\n   background-color: #8dd1ea;\\r\\n   border-radius: 10px;\\r\\n   box-shadow: 10px 5px 3px rgb(0, 0, 0, 0.5);\\r\\n}\\r\\n\\r\\nmat-form-field[_ngcontent-%COMP%] {\\r\\n   width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\nmat-form-field[_ngcontent-%COMP%], input[_ngcontent-%COMP%] {\\r\\n   width: 60%;\\r\\n   margin-left: 20px;\\r\\n\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0dBQ0csdUJBQXVCO0dBQ3ZCLHNCQUFzQjtHQUN0Qix5QkFBeUI7R0FDekIsbUJBQW1CO0dBQ25CLDBDQUEwQztBQUM3Qzs7QUFFQTtHQUNHLFdBQVc7O0FBRWQ7O0FBRUE7O0dBRUcsVUFBVTtHQUNWLGlCQUFpQjs7QUFFcEIiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtY2FyZCB7XHJcbiAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xyXG4gICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGRkMWVhO1xyXG4gICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICBib3gtc2hhZG93OiAxMHB4IDVweCAzcHggcmdiKDAsIDAsIDAsIDAuNSk7XHJcbn1cclxuXHJcbm1hdC1mb3JtLWZpZWxkIHtcclxuICAgd2lkdGg6IDEwMCU7XHJcblxyXG59XHJcblxyXG5tYXQtZm9ybS1maWVsZCxcclxuaW5wdXQge1xyXG4gICB3aWR0aDogNjAlO1xyXG4gICBtYXJnaW4tbGVmdDogMjBweDtcclxuXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;ICDnEC,iCAA6D;;;IAAhDA,6BAAe;;;;;;IAC5BA,8BAA2E;IAGhDA,sBAAM;IAAAA,iBAAO;IAGtCA,+BAAqD;IAAvBA;MAAAA;MAAA;MAAA,OAAYA,+BAAS;IAAA,EAAC;IACnDA,sCAAgB;IACfA,2BAAyF;IAC1FA,iBAAiB;IAMjBA,sCAAgB;IACfA,2BAAwF;IACzFA,iBAAiB;IAKjBA,kCAA2E;IAACA,4BAAU;IAAAA,iBAAS;;;;IAhB1FA,eAAuB;IAAvBA,4CAAuB;;;ADC/B,OAAM,MAAOC,cAAc;EAI1BC,YAAoBC,EAAe;IAAf,OAAE,GAAFA,EAAE;IAFtB,cAAS,GAAG,KAAK;EAEqB;EAEtCC,QAAQ;IACP,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC9BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACQ,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,CAAC;KAC7D,CAAC;EACH;EACAC,OAAO,IAAI;;AAZCV,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCR3BhB,+EAA6D;MAC7DA,gEAyBM;;;MA1BwBA,oCAAe;MACYA,eAAgB;MAAhBA,qCAAgB","names":["Validators","i0","LoginComponent","constructor","fb","ngOnInit","loginForm","group","email","required","password","minLength","OnLogin","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Projects\\myPosts\\src\\app\\Auth\\login\\login.component.ts","C:\\Projects\\myPosts\\src\\app\\Auth\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\n\n@Component({\n\tselector: \"app-login\",\n\ttemplateUrl: \"./login.component.html\",\n\tstyleUrls: [\"./login.component.css\"],\n})\nexport class LoginComponent implements OnInit {\n\tloginForm: FormGroup;\n\tisLoading = false;\n\n\tconstructor(private fb: FormBuilder) {}\n\n\tngOnInit(): void {\n\t\tthis.loginForm = this.fb.group({\n\t\t\temail: [\"\", [Validators.required, Validators.email]],\n\t\t\tpassword: [\"\", [Validators.required, Validators.minLength(5)]],\n\t\t});\n\t}\n\tOnLogin() {}\n}\n","<mat-spinner [diameter]=\"80\" *ngIf=\"isLoading\"></mat-spinner>\n<div fxLayoutAlign=\"center\" fxFlexFill class=\"main-div\" *ngIf=\"!isLoading\">\n\t<mat-card color=\"primary\" fxFlex=\"50\">\n\t\t<mat-card-title>\n\t\t\t<span class=\"jumbotron\">Log in</span>\n\t\t</mat-card-title>\n\n\t\t<form [formGroup]=\"loginForm\" (ngSubmit)=\"OnLogin()\">\n\t\t\t<mat-form-field>\n\t\t\t\t<input matInput type=\"email\" formControlName=\"email\" placeholder=\"Post Title\" required />\n\t\t\t</mat-form-field>\n\t\t\t<!-- <div class=\"alert alert-danger\" *ngIf=\"title.invalid && (title.touched || title.dirty)\">\n\t\t\t\t<mat-error *ngIf=\"title.errors.required\">this is a required field</mat-error>\n\t\t\t\t<mat-error *ngIf=\"title.errors.minlength\">Min length is 7</mat-error>\n\t\t\t</div> -->\n\n\t\t\t<mat-form-field>\n\t\t\t\t<input matInput type=\"password\" formControlName=\"password\" placeholder=\"Post Content\" />\n\t\t\t</mat-form-field>\n\t\t\t<!-- <div class=\"alert alert-danger\" *ngIf=\"content.invalid && (content.touched || content.dirty)\">\n\t\t\t\t<mat-error *ngIf=\"content.errors.required\">this is a required field</mat-error>\n\t\t\t\t<mat-error *ngIf=\"content.errors.minlength\">Min length is 10</mat-error>\n\t\t\t</div> -->\n\t\t\t<button class=\"save-button\" mat-raised-button color=\"accent\" type=\"submit\"> Save Post </button>\n\t\t</form>\n\t</mat-card>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}