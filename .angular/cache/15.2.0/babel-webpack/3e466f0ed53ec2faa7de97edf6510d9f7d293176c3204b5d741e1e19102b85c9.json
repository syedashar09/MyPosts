{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = \"http://localhost:3000/api/user/\";\n    this.IsAuthenticated = false;\n    this.authStatusListner = new Subject();\n  }\n  getAuthStatusListner() {\n    return this.authStatusListner.asObservable();\n  }\n  CreateUser(email, username, password) {\n    const AuthData = {\n      email: email,\n      username: username,\n      password: password\n    };\n    this.http.post(this.url + \"signup\", AuthData).subscribe(Response => {\n      console.log(Response);\n    });\n  }\n  logInUser(email, password) {\n    const AuthData = {\n      email: email,\n      password: password,\n      username: null\n    };\n    this.http.post(\"http://localhost:3000/api/user/login\", AuthData).subscribe(Response => {\n      this.AuthToken = Response.token;\n      if (Response.token) {\n        const expiresInDuration = Response.expiresIn;\n        this.setAuthTimer(expiresInDuration);\n        this.authStatusListner.next(true);\n        this.IsAuthenticated = true;\n        console.log(Response.message);\n      }\n    });\n    this.router.navigate([\"/\"]);\n  }\n  // saveToken() {\n  // \tlocalStorage.setItem('token', this.AuthToken);\n  // \tlocalStorage.setItem('expiration',)\n  // }\n  logOutUser() {\n    this.AuthToken = null;\n    this.IsAuthenticated = false;\n    this.authStatusListner.next(false);\n    clearTimeout(this.tokenTimer);\n    this.router.navigate([\"/\"]);\n  }\n  setAuthTimer(duration) {\n    this.tokenTimer = setTimeout(() => {\n      this.logOutUser();\n    }, duration * 1000);\n    console.log(\"Setting timer: \" + duration);\n  }\n  getIsAuth() {\n    return this.IsAuthenticated;\n  }\n  getAuthToken() {\n    return this.AuthToken;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,MAAM;;;;AAM9B,OAAM,MAAOC,WAAW;EAOvBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAN5C,QAAG,GAAG,iCAAiC;IAEvC,oBAAe,GAAG,KAAK;IACvB,sBAAiB,GAAG,IAAIJ,OAAO,EAAW;EAGa;EAE/DK,oBAAoB;IACnB,OAAO,IAAI,CAACC,iBAAiB,CAACC,YAAY,EAAE;EAC7C;EAEAC,UAAU,CAACC,KAAa,EAAEC,QAAgB,EAAEC,QAAgB;IAC3D,MAAMC,QAAQ,GAAa;MAC1BH,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACV;IACD,IAAI,CAACR,IAAI,CAACU,IAAI,CAAC,IAAI,CAACC,GAAG,GAAG,QAAQ,EAAEF,QAAQ,CAAC,CAACG,SAAS,CAACC,QAAQ,IAAG;MAClEC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACtB,CAAC,CAAC;EACH;EAEAG,SAAS,CAACV,KAAa,EAAEE,QAAgB;IACxC,MAAMC,QAAQ,GAAa;MAAEH,KAAK,EAAEA,KAAK;MAAEE,QAAQ,EAAEA,QAAQ;MAAED,QAAQ,EAAE;IAAI,CAAE;IAC/E,IAAI,CAACP,IAAI,CACPU,IAAI,CACJ,sCAAsC,EACtCD,QAAQ,CACR,CACAG,SAAS,CAACC,QAAQ,IAAG;MACrB,IAAI,CAACI,SAAS,GAAGJ,QAAQ,CAACK,KAAK;MAC/B,IAAIL,QAAQ,CAACK,KAAK,EAAE;QACnB,MAAMC,iBAAiB,GAAGN,QAAQ,CAACO,SAAS;QAC5C,IAAI,CAACC,YAAY,CAACF,iBAAiB,CAAC;QAEpC,IAAI,CAAChB,iBAAiB,CAACmB,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAACC,eAAe,GAAG,IAAI;QAC3BT,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACW,OAAO,CAAC;;IAE/B,CAAC,CAAC;IACH,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC5B;EAEA;EACA;EACA;EACA;EACAC,UAAU;IACT,IAAI,CAACT,SAAS,GAAG,IAAI;IACrB,IAAI,CAACM,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACpB,iBAAiB,CAACmB,IAAI,CAAC,KAAK,CAAC;IAClCK,YAAY,CAAC,IAAI,CAACC,UAAU,CAAC;IAC7B,IAAI,CAAC3B,MAAM,CAACwB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC5B;EACQJ,YAAY,CAACQ,QAAgB;IACpC,IAAI,CAACD,UAAU,GAAGE,UAAU,CAAC,MAAK;MACjC,IAAI,CAACJ,UAAU,EAAE;IAClB,CAAC,EAAEG,QAAQ,GAAG,IAAI,CAAC;IACnBf,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGc,QAAQ,CAAC;EAC1C;EACAE,SAAS;IACR,OAAO,IAAI,CAACR,eAAe;EAC5B;EACAS,YAAY;IACX,OAAO,IAAI,CAACf,SAAS;EACtB;;AAnEYnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmC,SAAXnC,WAAW;EAAAoC,YAFX;AAAM","names":["Subject","AuthService","constructor","http","router","getAuthStatusListner","authStatusListner","asObservable","CreateUser","email","username","password","AuthData","post","url","subscribe","Response","console","log","logInUser","AuthToken","token","expiresInDuration","expiresIn","setAuthTimer","next","IsAuthenticated","message","navigate","logOutUser","clearTimeout","tokenTimer","duration","setTimeout","getIsAuth","getAuthToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\myPosts\\src\\app\\Auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { AuthData } from \"./auth.Model\";\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class AuthService {\n\tprivate url = \"http://localhost:3000/api/user/\";\n\tprivate AuthToken: string;\n\tprivate IsAuthenticated = false;\n\tprivate authStatusListner = new Subject<boolean>();\n\tprivate tokenTimer: any;\n\n\tconstructor(private http: HttpClient, private router: Router) {}\n\n\tgetAuthStatusListner() {\n\t\treturn this.authStatusListner.asObservable();\n\t}\n\n\tCreateUser(email: string, username: string, password: string) {\n\t\tconst AuthData: AuthData = {\n\t\t\temail: email,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t};\n\t\tthis.http.post(this.url + \"signup\", AuthData).subscribe(Response => {\n\t\t\tconsole.log(Response);\n\t\t});\n\t}\n\n\tlogInUser(email: string, password: string) {\n\t\tconst AuthData: AuthData = { email: email, password: password, username: null };\n\t\tthis.http\n\t\t\t.post<{ message: string; token: string; expiresIn: number }>(\n\t\t\t\t\"http://localhost:3000/api/user/login\",\n\t\t\t\tAuthData\n\t\t\t)\n\t\t\t.subscribe(Response => {\n\t\t\t\tthis.AuthToken = Response.token;\n\t\t\t\tif (Response.token) {\n\t\t\t\t\tconst expiresInDuration = Response.expiresIn;\n\t\t\t\t\tthis.setAuthTimer(expiresInDuration);\n\n\t\t\t\t\tthis.authStatusListner.next(true);\n\t\t\t\t\tthis.IsAuthenticated = true;\n\t\t\t\t\tconsole.log(Response.message);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.router.navigate([\"/\"]);\n\t}\n\n\t// saveToken() {\n\t// \tlocalStorage.setItem('token', this.AuthToken);\n\t// \tlocalStorage.setItem('expiration',)\n\t// }\n\tlogOutUser() {\n\t\tthis.AuthToken = null;\n\t\tthis.IsAuthenticated = false;\n\t\tthis.authStatusListner.next(false);\n\t\tclearTimeout(this.tokenTimer);\n\t\tthis.router.navigate([\"/\"]);\n\t}\n\tprivate setAuthTimer(duration: number) {\n\t\tthis.tokenTimer = setTimeout(() => {\n\t\t\tthis.logOutUser();\n\t\t}, duration * 1000);\n\t\tconsole.log(\"Setting timer: \" + duration);\n\t}\n\tgetIsAuth() {\n\t\treturn this.IsAuthenticated;\n\t}\n\tgetAuthToken() {\n\t\treturn this.AuthToken;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}