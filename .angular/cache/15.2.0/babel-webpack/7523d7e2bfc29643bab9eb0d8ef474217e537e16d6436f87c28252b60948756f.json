{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthInterceptor {\n  constructor(AuthService) {\n    this.AuthService = AuthService;\n  }\n  intercept(req, next) {\n    const AuthToken = this.AuthService.getAuthToken();\n    if (AuthToken) {\n      const AuthRequest = req.clone({\n        headers: req.headers.set(\"Authorization\", \"Bearer \" + AuthToken)\n      });\n      return next.handle(AuthRequest);\n    } else {\n      return next.handle(req);\n    }\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAC3BC,YAAmBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE9CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IACjD,MAAMC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE;IAEjD,IAAID,SAAS,EAAE;MACd,MAAME,WAAW,GAAGJ,GAAG,CAACK,KAAK,CAAC;QAC7BC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGL,SAAS;OAC/D,CAAC;MAEF,OAAOD,IAAI,CAACO,MAAM,CAACJ,WAAW,CAAC;KAC/B,MAAM;MACN,OAAOH,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;;EAEzB;;AAfYJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["AuthInterceptor","constructor","AuthService","intercept","req","next","AuthToken","getAuthToken","AuthRequest","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["C:\\Projects\\myPosts\\src\\app\\Auth\\Auth.Interceptor.ts"],"sourcesContent":["import { HttpErrorResponse, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { catchError } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\tconstructor(public AuthService: AuthService) {}\r\n\r\n\tintercept(req: HttpRequest<any>, next: HttpHandler) {\r\n\t\tconst AuthToken = this.AuthService.getAuthToken();\r\n\r\n\t\tif (AuthToken) {\r\n\t\t\tconst AuthRequest = req.clone({\r\n\t\t\t\theaders: req.headers.set(\"Authorization\", \"Bearer \" + AuthToken),\r\n\t\t\t});\r\n\r\n\t\t\treturn next.handle(AuthRequest);\r\n\t\t} else {\r\n\t\t\treturn next.handle(req);\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}